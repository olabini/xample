$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'rubygems'
require 'spec'
require 'xample'
require 'singleton'

module BonusRegistration
end
module BonusRegistration2
end

class Swallower
  include Singleton
  def method_missing(name, *args, &block)
    $stderr.puts "Swallowed #{name}(#{args.inspect})" if $DEBUG
    Swallower.instance
  end
end

module Xample
  module Tests
    # Simple DSL that will basically do an action like this:
    # take the symbol for the currency
    # take the number for the amount
    # take the part ending, where ignored parts are "for", "for each", "on", "per"
    # then call BonusRegistration.create(num, currency) and then
    # construct a new method with the end of the words
    #   "per existing account" will call on_existing_account
    #
    # By default the examples are line based, doesn't care about spaces 
    # and other noise characters, except as for separation
    # It also doesn't care about case by default
    SimpleBonus = Xample::Text::DSL.new do 
      xample(<<DSL).
bonus $1000 each new account
bonus $1000 for new account
bonus $1000 on new account
bonus $1000 per new account
bonus $1000 new account
DSL
      action do 
        BonusRegistration.create(1000, "$").on_new_account
      end

      xample(<<DSL).
bonus 1000 USD each new account
bonus 1000 USD for new account
bonus 1000 USD on new account
bonus 1000 USD per new account
bonus 1000 USD new account
DSL
      action do 
        BonusRegistration.create(1000, "USD").on_new_account
      end
    end
    
    BNL = Xample::Text::DSL.new do 
      xample(<<DSL).
bonus $2,000 for each new account as of the last 12 months, payable in January
bonus $2,000 new account last 12 months, payable January
DSL
      action do 
        BonusRegistration2.create(2000, "$").new_account(12, :payable => "January")
      end
      
      xample(<<DSL).
bonus $1,500 for each account with greater than 5 people in February, payable in March
bonus $1,500 each account greater than 5 people February, payable March
DSL
      action do 
        BonusRegistration2.create(1500, "$").each_account("February", :greater_than => people(5), :payable => "March")
      end
      
# bonus $1,000 for each account in NY, SF, or Chi every month, payable the subsequent month
# bonus $1,000 for each account using C#, Java, or Ruby every month, payable the subsequent month
# bonus $1,500 for each account using Erlang, Lisp, Smalltalk, or Python every month, payable the subsequent month
# bonus $3,000 for each account where team satisfaction is greater than 8 and the project has been running for more than 12 months in May, payable in June
# bonus $2,000 for each account with a profit margin greater than 60% every month, payable the subsequent month
# bonus $100 for each consultant staffed on your accounts with a satisfaction score greater than 8 every month, payable the subsequent month
# bonus $1000 for each year of employment in January, payable in May
# bonus 15% of your base salary if you've been employed more than 5 years in November, payable in December
# bonus 40% of your base salary if you've been employed more than 10 years in November, payable in December
# bonus 5% of any profits generated from new accounts created by an employee referral each month, payable the subsequent month
# bonus $100 for each employee you sponsor each month, payable the subsequent month
# bonus 1% of gross profit generated by your accounts for the past 12 months in January, payable in September
# bonus $1000 for each account with a client satisfaction score greater than 9 and a team satisfaction score greater than 9 each month, payable the subsequent month
# bonus $500 for each account with no team members' satisfaction score less than 5 and the team is less than 15 people and the team has 1 PM in June, payable in July
      
    end
  end
end
